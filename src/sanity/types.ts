/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type BlockContentObject = {
  _type: 'blockContentObject';
  title?: string;
  richText?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h3' | 'blockquote';
        listItem?: 'bullet';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'imageAlt';
        _key: string;
      }
  >;
};

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h3' | 'blockquote';
      listItem?: 'bullet';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: 'imageAlt';
      _key: string;
    }
>;

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Tag = {
  _id: string;
  _type: 'tag';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  value?: Slug;
};

export type Focus = {
  _id: string;
  _type: 'focus';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderRank?: string;
  name?: string;
  description?: string;
};

export type ProjectDetail = {
  _id: string;
  _type: 'projectDetail';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  parentProject?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'project';
  };
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'imageAlt';
  };
  sections?: Array<
    {
      _key: string;
    } & BlockContentObject
  >;
};

export type Project = {
  _id: string;
  _type: 'project';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderRank?: string;
  name?: string;
  description?: BlockContent;
  slug?: Slug;
  year?: string;
  url?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'imageAlt';
  };
  tags?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'tag';
  }>;
  tagColor?: 'primary' | 'black' | 'background';
  titleColor?: 'primary' | 'black' | 'background';
};

export type ImageAlt = {
  _type: 'imageAlt';
  asset?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | BlockContentObject
  | BlockContent
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Tag
  | Focus
  | ProjectDetail
  | Project
  | ImageAlt
  | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../bara-portfolio-2024/src/sanity/api.ts
// Variable: focusesQuery
// Query: *[_type == "focus"]{name,description, orderRank,}|order(orderRank)
export type FocusesQueryResult = Array<{
  name: string | null;
  description: string | null;
  orderRank: string | null;
}>;
// Variable: projectsQuery
// Query: *[_type == "project"]{"id":_id,name,description,"slug":slug.current,url,   tags[]-> {    name,    "value":value.current  },  image{asset->{...,metadata}},  tagColor,  titleColor,  "imageAlt":image.alt,  orderRank,  }|order(orderRank)
export type ProjectsQueryResult = Array<{
  id: string;
  name: string | null;
  description: BlockContent | null;
  slug: string | null;
  url: string | null;
  tags: Array<{
    name: string | null;
    value: string | null;
  }> | null;
  image: {
    asset: {
      _id: string;
      _type: 'sanity.imageAsset';
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata: SanityImageMetadata | null;
      source?: SanityAssetSourceData;
    } | null;
  } | null;
  tagColor: 'background' | 'black' | 'primary' | null;
  titleColor: 'background' | 'black' | 'primary' | null;
  imageAlt: string | null;
  orderRank: string | null;
}>;
// Variable: projectDetailQuery
// Query: *[_type == "projectDetail" && parentProject->slug.current ==$projectSlug]{"id":_id,    image{asset->{...,metadata}},    "imageAlt":image.alt,   parentProject-> {    _id,    name,description,"slug":slug.current,url,    year,    tags[]-> {    _id,    name,    "value":value.current  },  },   sections,  }[0]
export type ProjectDetailQueryResult = {
  id: string;
  image: {
    asset: {
      _id: string;
      _type: 'sanity.imageAsset';
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata: SanityImageMetadata | null;
      source?: SanityAssetSourceData;
    } | null;
  } | null;
  imageAlt: string | null;
  parentProject: {
    _id: string;
    name: string | null;
    description: BlockContent | null;
    slug: string | null;
    url: string | null;
    year: string | null;
    tags: Array<{
      _id: string;
      name: string | null;
      value: string | null;
    }> | null;
  } | null;
  sections: Array<
    {
      _key: string;
    } & BlockContentObject
  > | null;
} | null;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    '*[_type == "focus"]{name,description, orderRank,}|order(orderRank)': FocusesQueryResult;
    '*[_type == "project"]{"id":_id,name,description,"slug":slug.current,url,\n   tags[]-> {\n    name,\n    "value":value.current\n  },\n  image{asset->{...,metadata}},\n  tagColor,\n  titleColor,\n  "imageAlt":image.alt,\n  orderRank,\n  }|order(orderRank)': ProjectsQueryResult;
    '*[_type == "projectDetail" && parentProject->slug.current ==$projectSlug]{"id":_id,\n    image{asset->{...,metadata}},\n    "imageAlt":image.alt,\n   parentProject-> {\n    _id,\n    name,description,"slug":slug.current,url,\n    year,\n    tags[]-> {\n    _id,\n    name,\n    "value":value.current\n  },\n  },\n   sections,\n  }[0]': ProjectDetailQueryResult;
  }
}
